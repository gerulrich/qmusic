name: Docker build and push

# Define the events that trigger the workflow
on:
  workflow_dispatch:
    inputs:
      version:
        description: Release version (M.m.p)
        required: true

jobs:
  docker:
    # Define the operating systems and architectures to run the job on
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [amd64, arm64]
    steps:
      # Check out the repository
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Prepare metadata and timestamps
      - name: Prepare
        id: prep
        run: |
          echo "created=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT
          echo "image_name=${{ secrets.DOCKER_USERNAME }}/${{ github.event.repository.name }}" >> $GITHUB_OUTPUT

      # Set up GraalVM environment
      - name: Set up GraalVM
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: '23.0.2'
          distribution: 'graalvm'
          github-token: ${{ secrets.TOKEN_GITHUB }}
          native-image-job-reports: 'true'

      # Install JBang and Quarkus CLI
      - name: Install JBang and Quarkus CLI
        run: |
          curl -Ls https://sh.jbang.dev | bash -s - trust add https://repo1.maven.org/maven2/io/quarkus/quarkus-cli/
          curl -Ls https://sh.jbang.dev | bash -s - app install --fresh --force quarkus@quarkusio
          echo "PATH=$PATH:/home/runner/.jbang/bin" >> $GITHUB_ENV

      # Verify the installation of Quarkus CLI
      - name: Verify Quarkus CLI installation
        run: quarkus --version

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Log in to Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      # Build the native image and push the Docker image
      - name: Build Native Image and Push Docker Image
        run: |
          echo "Building image for platform: ${{ matrix.platform }}"
          # We still build with platform suffix for internal reference
          PLATFORM_TAG="${{ steps.prep.outputs.image_name }}:${{ github.event.inputs.version }}-${{ matrix.platform }}"
          
          # Define the platform specific arguments
          DOCKER_PLATFORM="linux/${{ matrix.platform }}"
          echo "Building for Docker platform: ${DOCKER_PLATFORM}"
          
          # Build using Quarkus
          quarkus image build --native \
          -Dquarkus.native.container-build=false \
          -Dquarkus.container-image.build=true \
          -Dquarkus.container-image.push=true \
          -Dquarkus.container-image.platform=linux/${{ matrix.platform }} \
          -Dquarkus.container-image.registry=docker.io \
          -Dquarkus.container-image.username=${{ secrets.DOCKER_USERNAME }} \
          -Dquarkus.container-image.password=${{ secrets.DOCKER_TOKEN }} \
          -Dquarkus.container-image.image=${{ steps.prep.outputs.image_name }}:${{ github.event.inputs.version }}-${{ matrix.platform }} \
          -Dquarkus.container-image.labels.\"org.opencontainers.image.created\"="${{ steps.prep.outputs.created }}" \
          -Dquarkus.container-image.labels.\"org.opencontainers.image.revision\"="${{ github.sha }}" \
          -Dquarkus.container-image.additional-args="--platform=${DOCKER_PLATFORM}" \
          -Dquarkus.container-image.labels.\"org.opencontainers.image.architecture\"="${{ matrix.platform }}"
          
          # Verify the image exists locally
          echo "Verifying local images:"
          docker images | grep ${{ steps.prep.outputs.image_name }}
          
          # Push explicitly as a backup with platform annotation
          echo "Pushing image explicitly with Docker CLI to ensure platform is preserved:"
          docker push ${PLATFORM_TAG} || echo "Warning: Docker push via CLI failed"
          
          # Additional platform verification - inspect the built image
          echo "Inspecting built image for platform information:"
          docker inspect ${PLATFORM_TAG} | jq '.[0].Architecture, .[0].Os'
          
          # Verify the architecture of the pushed image
          echo "Verifying image architecture with Docker Hub API:"
          TOKEN=$(curl -s -H "Content-Type: application/json" -X POST -d '{"username": "${{ secrets.DOCKER_USERNAME }}", "password": "${{ secrets.DOCKER_TOKEN }}"}' https://hub.docker.com/v2/users/login/ | jq -r .token)
          curl -s -H "Authorization: JWT ${TOKEN}" https://hub.docker.com/v2/repositories/${{ secrets.DOCKER_USERNAME }}/${{ github.event.repository.name }}/tags/${{ github.event.inputs.version }}-${{ matrix.platform }}/ | jq .

  create-manifest:
    needs: docker
    runs-on: ubuntu-latest
    steps:
      - name: Prepare
        id: prep
        run: |
          echo "image_name=${{ secrets.DOCKER_USERNAME }}/${{ github.event.repository.name }}" >> $GITHUB_OUTPUT

      # Log in to Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Create and push Docker manifest for multi-arch support
        run: |
          VERSION="${{ github.event.inputs.version }}"
          IMAGE_NAME="${{ steps.prep.outputs.image_name }}"
          
          # Enable experimental features for manifest command
          export DOCKER_CLI_EXPERIMENTAL=enabled
          
          # Create and push the version manifest with explicit architecture annotations
          docker manifest create ${IMAGE_NAME}:${VERSION} \
            --amend ${IMAGE_NAME}:${VERSION}-amd64 \
            --amend ${IMAGE_NAME}:${VERSION}-arm64
          
          # Explicitly annotate architectures to ensure they're correctly identified
          docker manifest annotate ${IMAGE_NAME}:${VERSION} ${IMAGE_NAME}:${VERSION}-amd64 --os linux --arch amd64
          docker manifest annotate ${IMAGE_NAME}:${VERSION} ${IMAGE_NAME}:${VERSION}-arm64 --os linux --arch arm64
            
          # Push with verbose output
          docker manifest push --purge ${IMAGE_NAME}:${VERSION}
          
          # Create and push the latest manifest with explicit architecture annotations
          docker manifest create ${IMAGE_NAME}:latest \
            --amend ${IMAGE_NAME}:${VERSION}-amd64 \
            --amend ${IMAGE_NAME}:${VERSION}-arm64
          
          # Explicitly annotate architectures for latest tag
          docker manifest annotate ${IMAGE_NAME}:latest ${IMAGE_NAME}:${VERSION}-amd64 --os linux --arch amd64
          docker manifest annotate ${IMAGE_NAME}:latest ${IMAGE_NAME}:${VERSION}-arm64 --os linux --arch arm64
            
          # Push latest with verbose output
          docker manifest push --purge ${IMAGE_NAME}:latest
          
          echo "Multi-architecture manifests created and pushed:"
          echo "- ${IMAGE_NAME}:${VERSION}"
          echo "- ${IMAGE_NAME}:latest"
          
          # Verify the manifests contain both architectures
          echo "Inspecting manifests to verify architectures:"
          docker manifest inspect ${IMAGE_NAME}:${VERSION} | jq '.manifests[].platform'
          docker manifest inspect ${IMAGE_NAME}:latest | jq '.manifests[].platform'

